name: dev ci/cd
# To automatically trigger a workflow, use "on" to define which events can cause the workflow to run
on:
  push:
    branches: [ "ci_cd" ]
  pull_request:
    branches: [ "ci_cd" ]
# A workflow run is made up of one or more "jobs", which run in parallel by default. 
jobs:
  # "build" is job_id it is unique identifier
  build:
    # define the type of machine(runner) to run the job on.
    runs-on: ubuntu-latest
    # A job contains a sequence of tasks called "steps". Steps can run commands,
    steps:
    # step 1 : check-out
    - name: check-out
      # "uses" keyword is used within a "step" and specify it should use "actions"
      uses: actions/checkout@v4 # This action checks-out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
    # step 2 : Set up JDK 17
    - name: set up jdk temurin 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin' # See 'Supported distributions' for available options
        java-version: '17'
    # step 3: set up application.properties
    - name: set up application.properties
      run: echo "${{secrets.APPLICATION}}" > web/src/main/resources/application.properties 
    # step 4: build with gradle
    - name: build with gradle
      run: | # pipe character in is used to define multiline string
        chmod +x ./gradlew
        ./gradlew clean build -x test
    # step 5,6 : build and push the docker image
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Push Docker image
      uses: docker/build-push-action@v5
      with:
        push: true
        tags: ${{ secrets.DEV_DOCKER_IMAGE }}
    # step 7 : deploy
    - name: connect to ec2 and deploy
      env:
        # specify environment variable at Github Action Runner machine for the duration of step 8
        DEV_SSH_PEM_KEY: ${{ secrets.DEV_SSH_PEM_KEY }}
        DEV_SSH_USER: ${{ secrets.DEV_SSH_USER }}
        DEV_SSH_HOST: ${{ secrets.DEV_SSH_HOST }}
      run: |
        echo "$DEV_SSH_PEM_KEY" >> $HOME/key.pem
        chmod 400 $HOME/key.pem
        ssh -i $HOME/key.pem -o StrictHostKeyChecking=no $DEV_SSH_USER@$DEV_SSH_HOST << 'EOF'
          set -e
          sudo dnf install docker -y
          sudo systemctl start docker
          sudo docker-compose down 
          sudo docker-compose pull
          sudo docker-compose up -d
          sudo docker image prune -a -f
        EOF
      
